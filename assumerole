#! /bin/bash


UnsetEnv() {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
}

SelectProfile() {
  echo "Select from these available accounts:"
  echo ""

  echo "${AVAILABLE_PROFILES}"

  printf "\nAccount:   "
  read aws_account
}

# Start with unsetting the current AWS_* envvars to avoid namespace pollution
UnsetEnv


export CONF="${HOME}/.assumerole"
AVAILABLE_PROFILES=$(jq --raw-output ".assume_roles | to_entries[] | .key"  ${CONF})

if [[ -n ${1} && ${1} == accountlist ]]
then
  echo ${AVAILABLE_PROFILES}
  exit 0
fi

if [[ -n ${1} && ${AVAILABLE_PROFILES} == *${1}* ]]
then
  # Argument passed on commandline is a valid profile
  echo "INFO: The profile ${1} passed on the commandline is a valid profile."
  echo "      Continuing to request the temporary credentials."
  aws_account=${1}
else
  SelectProfile
fi

### Check config before asking for the MFA token
PROFILE=$(jq --raw-output ".assume_roles[\"${aws_account}\"][\"aws_profile\"]" ${CONF})
ACCOUNT=$(jq --raw-output ".assume_roles[\"${aws_account}\"][\"aws_account\"]" ${CONF})
   ROLE=$(jq --raw-output ".assume_roles[\"${aws_account}\"][\"aws_role\"]"    ${CONF})
MFA_ARN=$(jq --raw-output ".assume_roles[\"${aws_account}\"][\"aws_mfa_arn\"]" ${CONF})

[[ "${PROFILE}" = "null" ]] && { echo "aws_profile missing for account ${aws_account} in ${CONF}"; exit 1; }
[[ "${ACCOUNT}" = "null" ]] && { echo "aws_account missing for account ${aws_account} in ${CONF}"; exit 1; }
[[ "${ROLE}" = "null" ]]    && { echo "aws_role missing for account ${aws_account} in ${CONF}"; exit 1; }
[[ "${MFA_ARN}" = "null" ]] && { echo "aws_mfa_arn missing for account ${aws_account} in ${CONF}"; exit 1; }

### Get MFA token from commandline or ask for it
if [[ -n ${2} ]]
then
  aws_token=${2}
else
  printf "MFA token: "
  read aws_token
fi

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN
unset AWS_ACCOUNT

export AWS_PROFILE=${PROFILE}

JSON=$(aws sts assume-role \
         --role-arn arn:aws:iam::${ACCOUNT}:role/${ROLE} \
         --role-session-name ${ROLE}${$} \
         --duration-seconds ${AWS_STS_DURATION_SECONDS:-3600} \
         --serial-number ${MFA_ARN} \
         --token-code ${aws_token} 2>/dev/null) || { echo "Error assuming role"; }

    AWS_ACCESS_KEY_ID=$(echo ${JSON} | jq --raw-output ".Credentials[\"AccessKeyId\"]")
AWS_SECRET_ACCESS_KEY=$(echo ${JSON} | jq --raw-output ".Credentials[\"SecretAccessKey\"]")
    AWS_SESSION_TOKEN=$(echo ${JSON} | jq --raw-output ".Credentials[\"SessionToken\"]")
       AWS_EXPIRATION=$(echo ${JSON} | jq --raw-output ".Credentials[\"Expiration\"]")

unset AWS_PROFILE

export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
export AWS_ACCOUNT=${aws_account}

JSONCALLERIDENTITYACCOUNT=$(aws sts get-caller-identity | jq --raw-output '.Account')
JSONCALLERIDENTITYROLEARN=$(aws sts get-caller-identity | jq --raw-output '.Arn')

if [[ ${JSONCALLERIDENTITYACCOUNT} == ${ACCOUNT} ]]
then
  echo "INFO: Account of assumed role ${JSONCALLERIDENTITYACCOUNT} matches desired account ${ACCOUNT}"
  if [[ ${JSONCALLERIDENTITYROLEARN} == */${ROLE}/* ]]
  then
    echo "INFO: Assumed role ${JSONCALLERIDENTITYROLEARN} matches desired role ${ROLE}"
    echo "INFO: The temporary credentials expire on ${AWS_EXPIRATION}"
    echo "INFO: Copy paste following commands to have the same credentials in"
    echo "      another shell"
    echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
    echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
    echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"
    echo "INFO: Starting a new shell"
    export aws_account
    ${SHELL}
  else
    echo "ERROR: Assumed role ${JSONCALLERIDENTITYROLEARN} does not match desired role ${ROLE}"
    echo "ERROR: Unsetting environment"
    UnsetEnv
  fi
else
  echo "ERROR: Account of assumed role ${JSONCALLERIDENTITYACCOUNT} does not match desired account ${ACCOUNT}"
  echo "ERROR: Unsetting environment"
  UnsetEnv
fi
